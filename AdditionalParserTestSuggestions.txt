Additional Parser Test Suggestions
====================================

1. Chained and Mixed Exponentiation
-----------------------------------
- Longer right-associative chains:
  - `2^3^2^1`  // expect 2^(3^(2^1)) = 512
- Exponent combined with unary minus:
  - `-2^3^2`   // expect -(2^(3^2)) = -512
  - `(-2)^3^2` // expect (-2)^(3^2) = -512
- Negative exponent:
  - `2^-3`     // expect 0.125
  - `-2^-2`    // expect -(2^-2) = -0.25

2. Absolute-Value Nesting and Mixing
-------------------------------------
- Nested absolute:
  - `||-3+4*I| - 5|`  // inner |…| = 5, then |5−5| = 0
- Absolute together with exponent and unary:
  - `|-2^2|`         // expect |-(2^2)| = 4
  - `-|2|^2`         // expect -( |2|^2 ) = -4
- Absolute of an exponent:
  - `|(1+I)^(1+I)|`  // compute cpow then magnitude

3. Parentheses and Grouping Edge-Cases
--------------------------------------
- Super-nested grouping:
  - `((((3+4*I))))`  // expect 3+4i
- Empty parentheses or degenerate:
  - `()`             // syntax error or NaN
  - `(42)`           // expect 42
- Mis-matched delimiters (should error):
  - `(3+2`           // missing ')'
  - `3+2)`           // stray ')'

4. Function-Call Edge Cases
---------------------------
- Zero-argument or multi-argument calls (if supported):
  - `min(1,2)`
  - `sin()`
- Nested calls:
  - `sqrt(exp(log(5)))`  // expect 5
- Unknown function:
  - `foo(3)`             // syntax or undefined-function error

5. Whitespace and Tokenization
------------------------------
- Irregular spacing:
  - `  -  2   ^   2  `  // expect -4
  - `1 +2* 3`           // expect 7
- Tabs, newlines inside expression:
  - `1+
2*	3`         // expect 7

6. Numeric Literals and Formats
-------------------------------
- Leading and trailing decimal points:
  - `.5^.5`          // expect sqrt(0.5)
- Scientific notation extremes:
  - `1e-3*1E3`       // expect 1.0
  - `1.2e+2`         // expect 120.0

7. Complex-Specific Tests
-------------------------
- Pure imaginary with exponent:
  - `I^2`            // expect -1+0i
  - `(2+3*I)^2`      // check binomial expansion
- Mixed-type arithmetic:
  - `3 + 4*I / 2`    // expect 3+2i
- Chained conj, real, imag:
  - `cimag(conj(3+4*I))`  // expect -4

8. Error and Boundary Conditions
--------------------------------
- Completely invalid input:
  - `notANumber`
  - `""` (empty string)
  - `"|"` (single bar)
- Extremely large expressions:
  - e.g., repeat “+1” a hundred times to test recursion depth
