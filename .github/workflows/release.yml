name: Build & Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-and-package:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        package: [library, headers]

    steps:
      - uses: actions/checkout@v3

      - name: Validate tag
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          if [[ ! "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "âœ– Invalid tag format: $TAG"
            exit 1
          fi

      - name: Cache deps & build artifacts
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/meson
            build/
          key: ${{ runner.os }}-deps-${{ matrix.os }}-${{ github.ref }}

      - name: Build or Package
        shell: bash -l {0}
        run: |
          if [ "${{ matrix.package }}" = "library" ]; then
            if [[ runner.os == 'Windows' ]]; then
              make clean
              make CC=gcc CFLAGS="-std=c99 -O3 -Wall" LEX=flex YACC="bison -y"
            else
              make
            fi
            mkdir -p artifacts
            cp libOCTypes.a artifacts/libOCTypes-${{ matrix.os }}.a
            zip -j artifacts/libOCTypes-${{ matrix.os }}.zip artifacts/libOCTypes-${{ matrix.os }}.a
          else
            mkdir -p artifacts/include
            cp src/*.h artifacts/include/
            zip -j artifacts/libOCTypes-headers-${{ matrix.os }}.zip artifacts/include/*.h
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.package }}-${{ matrix.os }}
          path: artifacts/*.zip

  release:
    needs: build-and-package
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/*.zip
          asset_name: |
            libOCTypes-${{ matrix.os }}.zip
            libOCTypes-headers-${{ matrix.os }}.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
