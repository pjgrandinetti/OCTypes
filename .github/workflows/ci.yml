name: CI & Release

on:
  push:
    branches: [ master ]
    tags: [ 'v*.*.*' ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
  pull_request:
    branches: [ master ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-core:
    name: Build & Test (ubuntu-latest.x64)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      CCACHE_BASEDIR: ${{ github.workspace }}
      CCACHE_COMPRESS: "1"
      CCACHE_MAXSIZE: "200M"
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y clang make flex bison zip unzip ccache

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-linux-${{ hashFiles('Makefile', 'src/**/*.c', 'src/**/*.h', 'tests/**/*.c', 'tests/**/*.h') }}
          restore-keys: |
            ccache-linux-

      - name: Build & test (Ubuntu, -j1)
        run: |
          set -euxo pipefail
          ccache --zero-stats || true
          make -j1 clean
          make -j1 test CC="ccache clang"
          make -j1 lib/libOCTypes.so CC="ccache clang"
          cp lib/libOCTypes.so libOCTypes.so
          cp lib/libOCTypes.a  libOCTypes.a
          ccache --show-stats || true

      - name: Package public headers (tags only)
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          set -euxo pipefail
          mkdir -p header-pkg/include
          cp src/*.h header-pkg/include/
          zip -j header-pkg/libOCTypes-headers.zip header-pkg/include/*.h

      - name: Upload Ubuntu artifacts (tags only)
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: libOCTypes-ubuntu-latest.x64
          path: |
            libOCTypes.a
            libOCTypes.so
          compression-level: 9
          if-no-files-found: error

      - name: Upload headers (tags only)
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: libOCTypes-headers
          path: header-pkg/libOCTypes-headers.zip
          compression-level: 9

  build-macos:
    name: Build & Test (macos-latest)
    runs-on: macos-latest
    timeout-minutes: 25
    env:
      CCACHE_BASEDIR: ${{ github.workspace }}
      CCACHE_COMPRESS: "1"
      CCACHE_MAXSIZE: "200M"
      HOMEBREW_NO_AUTO_UPDATE: "1"
      HOMEBREW_NO_INSTALL_CLEANUP: "1"
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Install deps
        run: |
          brew install flex bison ccache
          echo "$(brew --prefix bison)/bin" >> $GITHUB_PATH
          echo "$(brew --prefix flex)/bin"  >> $GITHUB_PATH

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-macos-${{ hashFiles('Makefile', 'src/**/*.c', 'src/**/*.h', 'tests/**/*.c', 'tests/**/*.h') }}
          restore-keys: |
            ccache-macos-

      - name: Build & test (macOS, -j1)
        run: |
          set -euxo pipefail
          ccache --zero-stats || true
          make -j1 clean
          make -j1 test CC="ccache clang"
          make -j1 lib/libOCTypes.dylib CC="ccache clang"
          cp lib/libOCTypes.dylib libOCTypes.dylib
          cp lib/libOCTypes.a     libOCTypes.a
          ccache --show-stats || true

      - name: Upload macOS artifacts (tags only)
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: libOCTypes-macos-latest
          path: |
            libOCTypes.a
            libOCTypes.dylib
          compression-level: 9
          if-no-files-found: error

  build-windows:
    name: Build & Test (windows-latest)
    runs-on: windows-latest
    timeout-minutes: 25
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Set up MSYS2 & MinGW
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          cache: true
          install: >
            mingw-w64-x86_64-toolchain
            make
            flex
            bison
            mingw-w64-x86_64-ccache

      - name: Cache ccache (MSYS2)
        uses: actions/cache@v4
        with:
          path: C:\msys64\home\runneradmin\.ccache
          key: ccache-windows-${{ hashFiles('Makefile', 'src/**/*.c', 'src/**/*.h', 'tests/**/*.c', 'tests/**/*.h') }}
          restore-keys: |
            ccache-windows-

      - name: Build & test (Windows, -j1)
        shell: msys2 {0}
        run: |
          set -euxo pipefail
          ccache --zero-stats || true
          make -j1 clean
          make -j1 test CC="ccache gcc" \
               CFLAGS="-std=c99 -I. -Isrc -O3 -Wall -Wextra -Wno-sign-compare -Wno-unused-parameter -Wno-missing-field-initializers" \
               LEX=flex YACC="bison"
          make -j1 lib/libOCTypes.dll CC="ccache gcc" \
               CFLAGS="-std=c99 -I. -Isrc -O3 -Wall -Wextra -Wno-sign-compare -Wno-unused-parameter -Wno-missing-field-initializers" \
               LEX=flex YACC="bison"
          cp lib/libOCTypes.a     libOCTypes.a
          cp lib/libOCTypes.dll   libOCTypes.dll
          cp lib/libOCTypes.dll.a libOCTypes.dll.a
          ccache --show-stats || true

      - name: Upload Windows artifacts (tags only)
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: libOCTypes-windows-latest
          path: |
            libOCTypes.a
            libOCTypes.dll
            libOCTypes.dll.a
          compression-level: 9
          if-no-files-found: error

  build-arm64:
    if: startsWith(github.ref, 'refs/tags/')
    name: Build & Test (ubuntu-latest.arm64)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64

      - name: Build & test in ARM64 container (-j1)
        run: |
          set -euxo pipefail
          docker run --rm --platform=linux/arm64 \
            -v ${{ github.workspace }}:/src -w /src ubuntu:22.04 bash -lc "\
              apt-get update && apt-get install -y clang make flex bison unzip && \
              make -j1 clean && make -j1 test CC=clang && \
              make -j1 lib/libOCTypes.so CC=clang && \
              cp lib/libOCTypes.a libOCTypes.a && \
              cp lib/libOCTypes.so libOCTypes.so"

      - name: Upload ARM64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: libOCTypes-ubuntu-latest.arm64
          path: |
            libOCTypes.a
            libOCTypes.so
          compression-level: 9
          if-no-files-found: error

  release:
    if: startsWith(github.ref, 'refs/tags/')
    name: Package & Release
    needs: [build-core, build-macos, build-windows, build-arm64]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Install zip
        run: sudo apt-get update && sudo apt-get install -y zip

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts

      - name: Copy header bundle
        run: |
          mkdir -p packages
          cp artifacts/libOCTypes-headers/libOCTypes-headers.zip packages/

      - name: Package libraries into ZIPs
        run: |
          set -euxo pipefail
          mkdir -p packages
          for osdir in artifacts/*; do
            [ -d "$osdir" ] || continue
            base="$(basename "$osdir")"
            platform="${base#libOCTypes-}"
            [ "$platform" = "headers" ] && continue
            files=( "$osdir"/libOCTypes.* )
            found=0
            for f in "${files[@]}"; do [ -f "$f" ] && found=1 && break; done
            [ $found -eq 1 ] || { echo "Skipping $osdir (no library files)"; continue; }
            zip -j "packages/libOCTypes-${platform}.zip" "${files[@]}"
          done

      - name: Create/Update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          files: packages/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          