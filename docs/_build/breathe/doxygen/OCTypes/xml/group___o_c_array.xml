<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="group___o_c_array" kind="group">
    <compoundname>OCArray</compoundname>
    <title>OCArray</title>
    <innerclass refid="struct_o_c_array_call_backs" prot="public">OCArrayCallBacks</innerclass>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group___o_c_array_1ga258ada3c18aefb7cd00f9fae05441cc9" prot="public" static="no">
        <type>const struct __OCArray *</type>
        <definition>typedef const struct __OCArray* OCArrayRef</definition>
        <argsstring></argsstring>
        <name>OCArrayRef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A reference to an immutable array object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/philip/Github/Software/OCTypes/src/OCArray.h" line="21" column="31" bodyfile="/Users/philip/Github/Software/OCTypes/src/OCArray.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___o_c_array_1ga24c04bc73e1c423b53a48ea599e81dec" prot="public" static="no">
        <type>struct __OCArray *</type>
        <definition>typedef struct __OCArray* OCMutableArrayRef</definition>
        <argsstring></argsstring>
        <name>OCMutableArrayRef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A reference to a mutable array object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/philip/Github/Software/OCTypes/src/OCArray.h" line="26" column="25" bodyfile="/Users/philip/Github/Software/OCTypes/src/OCArray.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___o_c_array_1ga9a0e720375d55e2b4bca97de78020714" prot="public" static="no">
        <type>const void *(*</type>
        <definition>typedef const void *(* OCArrayRetainCallBack) (const void *value)</definition>
        <argsstring>)(const void *value)</argsstring>
        <name>OCArrayRetainCallBack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Callback function to retain a value in the array.</para>
<para>:param value: The value to be retained. :return: The retained value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/philip/Github/Software/OCTypes/src/OCArray.h" line="34" column="15" bodyfile="/Users/philip/Github/Software/OCTypes/src/OCArray.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___o_c_array_1gabcdb9b85e7c4ddf2b2580607b7924dec" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* OCArrayReleaseCallBack) (const void *value)</definition>
        <argsstring>)(const void *value)</argsstring>
        <name>OCArrayReleaseCallBack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Callback function to release a value from the array.</para>
<para>:param value: The value to be released. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/philip/Github/Software/OCTypes/src/OCArray.h" line="41" column="9" bodyfile="/Users/philip/Github/Software/OCTypes/src/OCArray.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___o_c_array_1ga3a4906659651a3bc7ee289eb01b99b69" prot="public" static="no">
        <type><ref refid="group___o_c_string_1ga34a97bf2ed10637e698c2cd3faa193d4" kindref="member">OCStringRef</ref>(*</type>
        <definition>typedef OCStringRef(* OCArrayCopyDescriptionCallBack) (const void *value)</definition>
        <argsstring>)(const void *value)</argsstring>
        <name>OCArrayCopyDescriptionCallBack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Callback function to create a string description of a value in the array.</para>
<para>:param value: The value for which to create a description. :return: An <ref refid="group___o_c_string_1ga34a97bf2ed10637e698c2cd3faa193d4" kindref="member">OCStringRef</ref> containing the description of the value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/philip/Github/Software/OCTypes/src/OCArray.h" line="49" column="9" bodyfile="/Users/philip/Github/Software/OCTypes/src/OCArray.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___o_c_array_1ga9ae83ba398624e3959f3086004b51bf8" prot="public" static="no">
        <type>bool(*</type>
        <definition>typedef bool(* OCArrayEqualCallBack) (const void *value1, const void *value2)</definition>
        <argsstring>)(const void *value1, const void *value2)</argsstring>
        <name>OCArrayEqualCallBack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Callback function to compare two values in the array for equality.</para>
<para>:param value1: The first value to compare. :param value2: The second value to compare. :return: True if the values are equal, false otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/philip/Github/Software/OCTypes/src/OCArray.h" line="58" column="9" bodyfile="/Users/philip/Github/Software/OCTypes/src/OCArray.h" bodystart="58" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="group___o_c_array_1ga182ff67a03e309f74629c2efe8a2e6e5" prot="public" static="no" extern="yes" mutable="no">
        <type>const <ref refid="struct_o_c_array_call_backs" kindref="compound">OCArrayCallBacks</ref></type>
        <definition>const OCArrayCallBacks kOCTypeArrayCallBacks</definition>
        <argsstring></argsstring>
        <name>kOCTypeArrayCallBacks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A predefined set of callbacks for arrays containing OCType objects. These callbacks use OCRetain, OCRelease, OCCopyDescription, and OCEqual. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/philip/Github/Software/OCTypes/src/OCArray.h" line="83" column="31" declfile="/Users/philip/Github/Software/OCTypes/src/OCArray.h" declline="83" declcolumn="31"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="group___o_c_array_1ga5cf2742d8c7fa86e142fe2180881adf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___o_c_type_1gae4fcca725e41e7af4659ba4902223981" kindref="member">OCTypeID</ref></type>
        <definition>OCTypeID OCArrayGetTypeID</definition>
        <argsstring>(void)</argsstring>
        <name>OCArrayGetTypeID</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the unique type identifier for OCArray objects.</para>
<para>:return: The <ref refid="group___o_c_type_1gae4fcca725e41e7af4659ba4902223981" kindref="member">OCTypeID</ref> associated with OCArray. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/philip/Github/Software/OCTypes/src/OCArray.h" line="90" column="10" declfile="/Users/philip/Github/Software/OCTypes/src/OCArray.h" declline="90" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group___o_c_array_1gab211609b6c6a616ebdd666612c4eef98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t OCArrayGetCount</definition>
        <argsstring>(OCArrayRef theArray)</argsstring>
        <name>OCArrayGetCount</name>
        <param>
          <type><ref refid="group___o_c_array_1ga258ada3c18aefb7cd00f9fae05441cc9" kindref="member">OCArrayRef</ref></type>
          <declname>theArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the number of values currently stored in the array.</para>
<para>:param theArray: The array to query. Must not be NULL. :return: The count of elements in the array. Returns 0 if theArray is NULL. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/philip/Github/Software/OCTypes/src/OCArray.h" line="98" column="10" declfile="/Users/philip/Github/Software/OCTypes/src/OCArray.h" declline="98" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group___o_c_array_1gaebb5f8fa913d5f2ab52058b863f7f504" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___o_c_array_1ga258ada3c18aefb7cd00f9fae05441cc9" kindref="member">OCArrayRef</ref></type>
        <definition>OCArrayRef OCArrayCreate</definition>
        <argsstring>(const void **values, uint64_t numValues, const OCArrayCallBacks *callBacks)</argsstring>
        <name>OCArrayCreate</name>
        <param>
          <type>const void **</type>
          <declname>values</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>numValues</declname>
        </param>
        <param>
          <type>const <ref refid="struct_o_c_array_call_backs" kindref="compound">OCArrayCallBacks</ref> *</type>
          <declname>callBacks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new, immutable array containing the provided values.</para>
<para>The values are retained according to the provided callbacks.</para>
<para>:param values: A C-style array of pointers to the values to add to the array. Must not be NULL if numValues &gt; 0. :param numValues: The number of values in the <computeroutput>values</computeroutput> C-array. :param callBacks: A pointer to an <ref refid="struct_o_c_array_call_backs" kindref="compound">OCArrayCallBacks</ref> structure that defines how to handle the values (e.g., retain, release, compare). If NULL, default behavior (simple pointer copy and comparison) is used. For arrays of OCType objects, kOCTypeArrayCallBacks should be used. :return: A new <ref refid="group___o_c_array_1ga258ada3c18aefb7cd00f9fae05441cc9" kindref="member">OCArrayRef</ref> instance, or NULL if creation fails (e.g., due to memory allocation issues). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/philip/Github/Software/OCTypes/src/OCArray.h" line="112" column="12" declfile="/Users/philip/Github/Software/OCTypes/src/OCArray.h" declline="112" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group___o_c_array_1ga4624c972ebdb139df9d868197fd3ed84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___o_c_array_1ga258ada3c18aefb7cd00f9fae05441cc9" kindref="member">OCArrayRef</ref></type>
        <definition>OCArrayRef OCArrayCreateCopy</definition>
        <argsstring>(OCArrayRef theArray)</argsstring>
        <name>OCArrayCreateCopy</name>
        <param>
          <type><ref refid="group___o_c_array_1ga258ada3c18aefb7cd00f9fae05441cc9" kindref="member">OCArrayRef</ref></type>
          <declname>theArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new, immutable array that is a copy of an existing array.</para>
<para>The values in the new array are retained as if they were added to the original.</para>
<para>:param theArray: The immutable array to copy. Must not be NULL. :return: A new <ref refid="group___o_c_array_1ga258ada3c18aefb7cd00f9fae05441cc9" kindref="member">OCArrayRef</ref> instance that is a copy of <computeroutput>theArray</computeroutput>, or NULL if <computeroutput>theArray</computeroutput> is NULL or copying fails. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/philip/Github/Software/OCTypes/src/OCArray.h" line="122" column="12" declfile="/Users/philip/Github/Software/OCTypes/src/OCArray.h" declline="122" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group___o_c_array_1gab35d251ea460416894dfefc8d602d925" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___o_c_array_1ga24c04bc73e1c423b53a48ea599e81dec" kindref="member">OCMutableArrayRef</ref></type>
        <definition>OCMutableArrayRef OCArrayCreateMutable</definition>
        <argsstring>(uint64_t capacity, const OCArrayCallBacks *callBacks)</argsstring>
        <name>OCArrayCreateMutable</name>
        <param>
          <type>uint64_t</type>
          <declname>capacity</declname>
        </param>
        <param>
          <type>const <ref refid="struct_o_c_array_call_backs" kindref="compound">OCArrayCallBacks</ref> *</type>
          <declname>callBacks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new, mutable array with a specified initial capacity.</para>
<para>:param capacity: The initial number of values the mutable array can store without reallocating its internal storage. Pass 0 to use a default initial capacity. :param callBacks: A pointer to an <ref refid="struct_o_c_array_call_backs" kindref="compound">OCArrayCallBacks</ref> structure that defines how to handle the values. If NULL, default behavior is used. For arrays of OCType objects, kOCTypeArrayCallBacks should be used. :return: A new <ref refid="group___o_c_array_1ga24c04bc73e1c423b53a48ea599e81dec" kindref="member">OCMutableArrayRef</ref> instance, or NULL if creation fails. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/philip/Github/Software/OCTypes/src/OCArray.h" line="133" column="19" declfile="/Users/philip/Github/Software/OCTypes/src/OCArray.h" declline="133" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group___o_c_array_1gaff447aa2a559bf1d1b08701d3b3701a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___o_c_array_1ga24c04bc73e1c423b53a48ea599e81dec" kindref="member">OCMutableArrayRef</ref></type>
        <definition>OCMutableArrayRef OCArrayCreateMutableCopy</definition>
        <argsstring>(OCArrayRef theArray)</argsstring>
        <name>OCArrayCreateMutableCopy</name>
        <param>
          <type><ref refid="group___o_c_array_1ga258ada3c18aefb7cd00f9fae05441cc9" kindref="member">OCArrayRef</ref></type>
          <declname>theArray</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new, mutable array that is a copy of an existing array (either mutable or immutable).</para>
<para>:param theArray: The array to copy. Must not be NULL. :return: A new <ref refid="group___o_c_array_1ga24c04bc73e1c423b53a48ea599e81dec" kindref="member">OCMutableArrayRef</ref> instance containing the same values as <computeroutput>theArray</computeroutput>, or NULL if <computeroutput>theArray</computeroutput> is NULL or copying fails. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/philip/Github/Software/OCTypes/src/OCArray.h" line="141" column="19" declfile="/Users/philip/Github/Software/OCTypes/src/OCArray.h" declline="141" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group___o_c_array_1ga9f3748edc03e1624767022b51e58c21d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const void *</type>
        <definition>const void * OCArrayGetValueAtIndex</definition>
        <argsstring>(OCArrayRef theArray, uint64_t index)</argsstring>
        <name>OCArrayGetValueAtIndex</name>
        <param>
          <type><ref refid="group___o_c_array_1ga258ada3c18aefb7cd00f9fae05441cc9" kindref="member">OCArrayRef</ref></type>
          <declname>theArray</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves the value at a specific index in the array.</para>
<para>:param theArray: The array to query. Must not be NULL. :param index: The zero-based index of the value to retrieve. Must be less than the count of the array. :return: The value at the specified <computeroutput>index</computeroutput>. Returns NULL if <computeroutput>theArray</computeroutput> is NULL or <computeroutput>index</computeroutput> is out of bounds. The-returned value is not additionally retained by this call. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/philip/Github/Software/OCTypes/src/OCArray.h" line="151" column="13" declfile="/Users/philip/Github/Software/OCTypes/src/OCArray.h" declline="151" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group___o_c_array_1gae67e86401e7c2c6f383a8a733308c7b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OCArrayAppendValue</definition>
        <argsstring>(OCMutableArrayRef theArray, const void *value)</argsstring>
        <name>OCArrayAppendValue</name>
        <param>
          <type><ref refid="group___o_c_array_1ga24c04bc73e1c423b53a48ea599e81dec" kindref="member">OCMutableArrayRef</ref></type>
          <declname>theArray</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Appends a value to the end of a mutable array.</para>
<para>The value is retained by the array using the retain callback, if one was provided during creation.</para>
<para>:param theArray: The mutable array to which the value will be appended. Must not be NULL. :param value: The value to append. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/philip/Github/Software/OCTypes/src/OCArray.h" line="161" column="6" declfile="/Users/philip/Github/Software/OCTypes/src/OCArray.h" declline="161" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___o_c_array_1ga877e4edac656b414855a61b601326899" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OCArrayAppendArray</definition>
        <argsstring>(OCMutableArrayRef theArray, OCArrayRef otherArray, OCRange range)</argsstring>
        <name>OCArrayAppendArray</name>
        <param>
          <type><ref refid="group___o_c_array_1ga24c04bc73e1c423b53a48ea599e81dec" kindref="member">OCMutableArrayRef</ref></type>
          <declname>theArray</declname>
        </param>
        <param>
          <type><ref refid="group___o_c_array_1ga258ada3c18aefb7cd00f9fae05441cc9" kindref="member">OCArrayRef</ref></type>
          <declname>otherArray</declname>
        </param>
        <param>
          <type><ref refid="struct_o_c_range" kindref="compound">OCRange</ref></type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Appends a range of values from one array to the end of a mutable array.</para>
<para>:param theArray: The destination mutable array. Must not be NULL. :param otherArray: The source array from which values are copied. Must not be NULL. :param range: The range of values to append from <computeroutput>otherArray</computeroutput>. The sum of <computeroutput>range.location</computeroutput> and <computeroutput>range.length</computeroutput> must not exceed the count of <computeroutput>otherArray</computeroutput>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/philip/Github/Software/OCTypes/src/OCArray.h" line="171" column="6" declfile="/Users/philip/Github/Software/OCTypes/src/OCArray.h" declline="171" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___o_c_array_1ga8296e17b6dd537e7f2f189247ae3db3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long OCArrayGetFirstIndexOfValue</definition>
        <argsstring>(OCArrayRef theArray, const void *value)</argsstring>
        <name>OCArrayGetFirstIndexOfValue</name>
        <param>
          <type><ref refid="group___o_c_array_1ga258ada3c18aefb7cd00f9fae05441cc9" kindref="member">OCArrayRef</ref></type>
          <declname>theArray</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finds the first index at which a given value appears in the array.</para>
<para>Equality is determined using the <computeroutput>equal</computeroutput> callback provided during array creation.</para>
<para>:param theArray: The array to search. Must not be NULL. :param value: The value to search for. :return: The zero-based index of the first occurrence of <computeroutput>value</computeroutput> in <computeroutput>theArray</computeroutput>. Returns -1 (or more precisely, <computeroutput>kOCNotFound</computeroutput>) if <computeroutput>value</computeroutput> is not found or <computeroutput>theArray</computeroutput> is NULL. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/philip/Github/Software/OCTypes/src/OCArray.h" line="183" column="6" declfile="/Users/philip/Github/Software/OCTypes/src/OCArray.h" declline="183" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___o_c_array_1gad496aefefecf2a53cc0b9e57cf3d7090" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool OCArrayContainsValue</definition>
        <argsstring>(OCArrayRef theArray, const void *value)</argsstring>
        <name>OCArrayContainsValue</name>
        <param>
          <type><ref refid="group___o_c_array_1ga258ada3c18aefb7cd00f9fae05441cc9" kindref="member">OCArrayRef</ref></type>
          <declname>theArray</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks whether the array contains a given value.</para>
<para>Equality is determined using the <computeroutput>equal</computeroutput> callback provided during array creation.</para>
<para>:param theArray: The array to search. Must not be NULL. :param value: The value to check for. :return: <computeroutput>true</computeroutput> if <computeroutput>value</computeroutput> is found in <computeroutput>theArray</computeroutput>, <computeroutput>false</computeroutput> otherwise (including if <computeroutput>theArray</computeroutput> is NULL). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/philip/Github/Software/OCTypes/src/OCArray.h" line="194" column="6" declfile="/Users/philip/Github/Software/OCTypes/src/OCArray.h" declline="194" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___o_c_array_1ga83fabca84f4f91facaa96d68febddcd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OCArrayRemoveValueAtIndex</definition>
        <argsstring>(OCMutableArrayRef theArray, uint64_t index)</argsstring>
        <name>OCArrayRemoveValueAtIndex</name>
        <param>
          <type><ref refid="group___o_c_array_1ga24c04bc73e1c423b53a48ea599e81dec" kindref="member">OCMutableArrayRef</ref></type>
          <declname>theArray</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes the value at a specific index from a mutable array.</para>
<para>The value being removed is released by the array using the release callback, if one was provided.</para>
<para>:param theArray: The mutable array from which to remove the value. Must not be NULL. :param index: The zero-based index of the value to remove. Must be less than the count of the array. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/philip/Github/Software/OCTypes/src/OCArray.h" line="204" column="6" declfile="/Users/philip/Github/Software/OCTypes/src/OCArray.h" declline="204" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___o_c_array_1ga81f1411e20e671c3580b487b3ded4d45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OCArrayInsertValueAtIndex</definition>
        <argsstring>(OCMutableArrayRef theArray, uint64_t index, const void *value)</argsstring>
        <name>OCArrayInsertValueAtIndex</name>
        <param>
          <type><ref refid="group___o_c_array_1ga24c04bc73e1c423b53a48ea599e81dec" kindref="member">OCMutableArrayRef</ref></type>
          <declname>theArray</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Inserts a value at a specific index in a mutable array.</para>
<para>The value is retained by the array. Existing values at or after the index are shifted.</para>
<para>:param theArray: The mutable array into which the value will be inserted. Must not be NULL. :param index: The zero-based index at which to insert <computeroutput>value</computeroutput>. Must be less than or equal to the count of the array. :param value: The value to insert. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/philip/Github/Software/OCTypes/src/OCArray.h" line="215" column="6" declfile="/Users/philip/Github/Software/OCTypes/src/OCArray.h" declline="215" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___o_c_array_1ga91c1a9a20ece30bf0c336406ecfe710d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OCArraySortValues</definition>
        <argsstring>(OCMutableArrayRef theArray, OCRange range, OCComparatorFunction comparator, void *context)</argsstring>
        <name>OCArraySortValues</name>
        <param>
          <type><ref refid="group___o_c_array_1ga24c04bc73e1c423b53a48ea599e81dec" kindref="member">OCMutableArrayRef</ref></type>
          <declname>theArray</declname>
        </param>
        <param>
          <type><ref refid="struct_o_c_range" kindref="compound">OCRange</ref></type>
          <declname>range</declname>
        </param>
        <param>
          <type><ref refid="group___o_c_library_1ga84ac0c9947faa8de6dbb81352513c1f7" kindref="member">OCComparatorFunction</ref></type>
          <declname>comparator</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sorts the values in a mutable array over a given range using a provided comparison function.</para>
<para>:param theArray: The mutable array to sort. Must not be NULL. :param range: The range of elements within the array to sort. :param comparator: The comparison function used to determine the order of elements. Must not be NULL. :param context: A pointer to user-defined data to be passed to the <computeroutput>comparator</computeroutput> function. Can be NULL. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/philip/Github/Software/OCTypes/src/OCArray.h" line="225" column="6" declfile="/Users/philip/Github/Software/OCTypes/src/OCArray.h" declline="225" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___o_c_array_1ga8e866069c1012ba9c9b501ce3300449e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t OCArrayBSearchValues</definition>
        <argsstring>(OCArrayRef array, OCRange range, const void *value, OCComparatorFunction comparator, void *context)</argsstring>
        <name>OCArrayBSearchValues</name>
        <param>
          <type><ref refid="group___o_c_array_1ga258ada3c18aefb7cd00f9fae05441cc9" kindref="member">OCArrayRef</ref></type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="struct_o_c_range" kindref="compound">OCRange</ref></type>
          <declname>range</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="group___o_c_library_1ga84ac0c9947faa8de6dbb81352513c1f7" kindref="member">OCComparatorFunction</ref></type>
          <declname>comparator</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs a binary search for a value within a sorted range of an array.</para>
<para>The array or the specified range within it must already be sorted according to the <computeroutput>comparator</computeroutput>.</para>
<para>:param array: The array to search. Must not be NULL. :param range: The range of elements within the array to search. :param value: The value to search for. :param comparator: The comparison function used to determine the order of elements and to find the value. Must not be NULL. :param context: A pointer to user-defined data to be passed to the <computeroutput>comparator</computeroutput> function. Can be NULL. :return: The index of the found value if it exists within the specified range; otherwise, <computeroutput>kOCNotFound</computeroutput> (-1). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/philip/Github/Software/OCTypes/src/OCArray.h" line="239" column="9" declfile="/Users/philip/Github/Software/OCTypes/src/OCArray.h" declline="239" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group___o_c_array_1ga985d4e7be07422a3748ed3b394f1cbc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___o_c_array_1ga258ada3c18aefb7cd00f9fae05441cc9" kindref="member">OCArrayRef</ref></type>
        <definition>OCArrayRef OCArrayCreateWithArray</definition>
        <argsstring>(OCArrayRef array)</argsstring>
        <name>OCArrayCreateWithArray</name>
        <param>
          <type><ref refid="group___o_c_array_1ga258ada3c18aefb7cd00f9fae05441cc9" kindref="member">OCArrayRef</ref></type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new, immutable array from an existing array.</para>
<para>:param array: The array to copy. Must not be NULL. :return: A new <ref refid="group___o_c_array_1ga258ada3c18aefb7cd00f9fae05441cc9" kindref="member">OCArrayRef</ref> instance that is a copy of <computeroutput>array</computeroutput>, or NULL if <computeroutput>array</computeroutput> is NULL or copying fails. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/philip/Github/Software/OCTypes/src/OCArray.h" line="247" column="12" declfile="/Users/philip/Github/Software/OCTypes/src/OCArray.h" declline="247" declcolumn="12"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
