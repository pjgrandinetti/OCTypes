<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="group___o_c_autorelease_pool" kind="group">
    <compoundname>OCAutoreleasePool</compoundname>
    <title>OCAutoreleasePool</title>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group___o_c_autorelease_pool_1ga56ec2ec00e14fe2d7fc810fcbfd75615" prot="public" static="no">
        <type>struct _OCAutoreleasePool *</type>
        <definition>typedef struct _OCAutoreleasePool* OCAutoreleasePoolRef</definition>
        <argsstring></argsstring>
        <name>OCAutoreleasePoolRef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>.. _OCAutoreleasePool_h:</para>
<sect1 id="group___o_c_autorelease_pool_1autotoc_md0">
<title>OCAutoreleasePool.h</title><para><bold>Author</bold>: Philip (Original Author) <bold>Documentation Editor</bold>: GitHub Copilot <bold>Date</bold>: May 10, 2025</para>
<para>Implements an autorelease pool for OCTypes.</para>
<para>OCAutoreleasePool provides a mechanism for managing the memory of OCType objects that follow a reference count pattern. This allows for delayed deallocation of objects, simplifying memory management in certain programming patterns.</para>
<sect2 id="group___o_c_autorelease_pool_1autotoc_md1">
<title>Create Rule:</title><para>Functions whose names contain &quot;Create&quot; follow the convention: they return a +1 retained object. The caller owns these objects and must balance each Create call by invoking the appropriate Release function when the object is no longer needed.</para>
</sect2>
<sect2 id="group___o_c_autorelease_pool_1autotoc_md2">
<title>Usage</title><para>To use an autorelease pool:<orderedlist>
<listitem><para>Create a pool:</para>
</listitem></orderedlist>
</para>
<para>.. code-block:: c</para>
<para><ref refid="group___o_c_autorelease_pool_1ga56ec2ec00e14fe2d7fc810fcbfd75615" kindref="member">OCAutoreleasePoolRef</ref> thePool = <ref refid="group___o_c_autorelease_pool_1ga5cfc8e5cd0e12238e896c8ab4e21e731" kindref="member">OCAutoreleasePoolCreate()</ref>;</para>
<para><orderedlist>
<listitem><para>Create, retain, and then autorelease objects. Objects added to the pool will be released when the pool itself is released.</para>
</listitem></orderedlist>
</para>
<para>.. code-block:: c</para>
<para>// Example: <ref refid="group___o_c_string_1ga34a97bf2ed10637e698c2cd3faa193d4" kindref="member">OCStringRef</ref> myString = OCStringCreateWithCString(&quot;hello&quot;); // OCAutorelease(myString); // Assuming myString is an <ref refid="group___o_c_type_1ga6acd02149bce3e91fb2fe325ab7f65ed" kindref="member">OCTypeRef</ref> compatible object</para>
<para><orderedlist>
<listitem><para>Release the pool. This action releases all objects contained within it.</para>
</listitem></orderedlist>
</para>
<para>.. code-block:: c</para>
<para>OCAutoreleasePoolRelease(thePool);</para>
</sect2>
<sect2 id="group___o_c_autorelease_pool_1autotoc_md3">
<title>Nesting Pools:</title><para>Autorelease pools can be nested. When a nested pool is released, it releases its objects.</para>
</sect2>
<sect2 id="group___o_c_autorelease_pool_1autotoc_md4">
<title>Context of Release:</title><para>OCAutoreleasePoolRelease should typically be called in the same scope or context (e.g., function, method, or loop iteration) where OCAutoreleasePoolCreate was called. Releasing a pool that is not at the top of the stack will cause all pools above it to be released as well, along with all their objects.</para>
</sect2>
<sect2 id="group___o_c_autorelease_pool_1autotoc_md5">
<title>Autoreleasing OCTypes:</title><para>OCType-compatible objects can be added to the current autorelease pool using the <ref refid="group___o_c_autorelease_pool_1ga7606cbde5db540d59e0daa4d73ac0c6f" kindref="member">OCAutorelease()</ref> function:</para>
<para>.. code-block:: c</para>
<para>// <ref refid="group___o_c_type_1ga6acd02149bce3e91fb2fe325ab7f65ed" kindref="member">OCTypeRef</ref> anOCTypeObject = ... ; // OCAutorelease(anOCTypeObject);</para>
</sect2>
<sect2 id="group___o_c_autorelease_pool_1autotoc_md6">
<title>Custom Types:</title><para>For custom C types to integrate with this autorelease mechanism, they typically need an autorelease method. This method would internally use a mechanism like <computeroutput>OCAutoreleasePoolAddObject(<ref refid="group___o_c_type_1ga6acd02149bce3e91fb2fe325ab7f65ed" kindref="member">OCTypeRef</ref> object, void (*release_func)(<ref refid="group___o_c_type_1ga6acd02149bce3e91fb2fe325ab7f65ed" kindref="member">OCTypeRef</ref> object))</computeroutput> (note: <computeroutput>OCAutoreleasePoolAddObject</computeroutput> is a conceptual example of how a manager might handle this; its exact name and signature might vary if it&apos;s an internal or related API not defined in this header). The first argument is the object to be autoreleased, and the second is its specific release function. This adds the object to the most recently created autorelease pool. An autorelease pool must exist before objects can be added to it.</para>
<para><bold>Copyright</bold>: Copyright (c) 2009-2025 PhySy Ltd. All rights reserved. :type <ref refid="group___o_c_autorelease_pool_1ga56ec2ec00e14fe2d7fc810fcbfd75615" kindref="member">OCAutoreleasePoolRef</ref>: :brief: A reference to an opaque OCAutoreleasePool structure.</para>
<para>This type represents a handle to an autorelease pool instance. </para>
</sect2>
</sect1>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/philip/Github/Software/OCTypes/src/OCAutoreleasePool.h" line="107" column="33" bodyfile="/Users/philip/Github/Software/OCTypes/src/OCAutoreleasePool.h" bodystart="107" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="group___o_c_autorelease_pool_1ga5cfc8e5cd0e12238e896c8ab4e21e731" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___o_c_autorelease_pool_1ga56ec2ec00e14fe2d7fc810fcbfd75615" kindref="member">OCAutoreleasePoolRef</ref></type>
        <definition>OCAutoreleasePoolRef OCAutoreleasePoolCreate</definition>
        <argsstring>(void)</argsstring>
        <name>OCAutoreleasePoolCreate</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>:func: OCAutoreleasePoolCreate :brief: Creates a new autorelease pool. :return: A reference to the newly created OCAutoreleasePool. The caller is responsible for releasing this pool using <ref refid="group___o_c_autorelease_pool_1ga3dbf0752793d4f3390e1787fa8b424f1" kindref="member">OCAutoreleasePoolRelease()</ref> when it is no longer needed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/philip/Github/Software/OCTypes/src/OCAutoreleasePool.h" line="116" column="22" declfile="/Users/philip/Github/Software/OCTypes/src/OCAutoreleasePool.h" declline="116" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="group___o_c_autorelease_pool_1ga3dbf0752793d4f3390e1787fa8b424f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool OCAutoreleasePoolRelease</definition>
        <argsstring>(OCAutoreleasePoolRef pool)</argsstring>
        <name>OCAutoreleasePoolRelease</name>
        <param>
          <type><ref refid="group___o_c_autorelease_pool_1ga56ec2ec00e14fe2d7fc810fcbfd75615" kindref="member">OCAutoreleasePoolRef</ref></type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>:func: OCAutoreleasePoolRelease :brief: Releases an OCAutoreleasePool object and all objects it contains.</para>
<para>When an autorelease pool is released, it sends a release message to all objects that were added to it.</para>
<para>:param pool: The <ref refid="group___o_c_autorelease_pool_1ga56ec2ec00e14fe2d7fc810fcbfd75615" kindref="member">OCAutoreleasePoolRef</ref> to be released. Must not be NULL. If <computeroutput>pool</computeroutput> is not the most recently created (top-most) pool, releasing it will also release all pools created after it. :return: true if the pool was successfully released, false otherwise (e.g., if <computeroutput>pool</computeroutput> is NULL or invalid). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/philip/Github/Software/OCTypes/src/OCAutoreleasePool.h" line="130" column="6" declfile="/Users/philip/Github/Software/OCTypes/src/OCAutoreleasePool.h" declline="130" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___o_c_autorelease_pool_1ga7606cbde5db540d59e0daa4d73ac0c6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const void *</type>
        <definition>const void * OCAutorelease</definition>
        <argsstring>(const void *ptr)</argsstring>
        <name>OCAutorelease</name>
        <param>
          <type>const void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>:func: OCAutorelease :brief: Adds an object to the current (top-most) autorelease pool.</para>
<para>The object will receive a release message when the autorelease pool itself is released. The object must be a valid OCType-compatible pointer.</para>
<para>:param ptr: A pointer to the OCType object to be autoreleased. :return: The same pointer <computeroutput>ptr</computeroutput> that was passed in, allowing for chained calls. :warning: If <computeroutput>ptr</computeroutput> is NULL, this may lead to issues or a crash when the autorelease pool is deallocated, depending on the underlying implementation of how objects are managed and released. It is best practice to ensure <computeroutput>ptr</computeroutput> is non-NULL. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/philip/Github/Software/OCTypes/src/OCAutoreleasePool.h" line="146" column="13" declfile="/Users/philip/Github/Software/OCTypes/src/OCAutoreleasePool.h" declline="146" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group___o_c_autorelease_pool_1gaf9330fb686ee111745e0d8731e26f3c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OCAutoreleasePoolDrain</definition>
        <argsstring>(OCAutoreleasePoolRef pool)</argsstring>
        <name>OCAutoreleasePoolDrain</name>
        <param>
          <type><ref refid="group___o_c_autorelease_pool_1ga56ec2ec00e14fe2d7fc810fcbfd75615" kindref="member">OCAutoreleasePoolRef</ref></type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>:func: OCAutoreleasePoolDrain :brief: Drains an autorelease pool, releasing all objects it contains.</para>
<para>This function is used to manually release all objects in the pool without deallocating the pool itself. This can be useful in scenarios where the pool needs to be reused.</para>
<para>:param pool: The <ref refid="group___o_c_autorelease_pool_1ga56ec2ec00e14fe2d7fc810fcbfd75615" kindref="member">OCAutoreleasePoolRef</ref> to be drained. Must not be NULL. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/philip/Github/Software/OCTypes/src/OCAutoreleasePool.h" line="158" column="6" declfile="/Users/philip/Github/Software/OCTypes/src/OCAutoreleasePool.h" declline="158" declcolumn="6"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
