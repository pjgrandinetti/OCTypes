<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="group___o_c_data" kind="group">
    <compoundname>OCData</compoundname>
    <title>OCData</title>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group___o_c_data_1ga2791cc4c74800d85862dcfb7c002c57c" prot="public" static="no">
        <type>const struct <ref refid="struct_____o_c_data" kindref="compound">__OCData</ref> *</type>
        <definition>typedef const struct __OCData* OCDataRef</definition>
        <argsstring></argsstring>
        <name>OCDataRef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>:type <ref refid="group___o_c_data_1ga2791cc4c74800d85862dcfb7c002c57c" kindref="member">OCDataRef</ref>: A reference to an immutable data object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/OCData.h" line="22" column="30" bodyfile="src/OCData.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___o_c_data_1gaa4e0a88e16159a6586cf3cc2715bf7a4" prot="public" static="no">
        <type>struct <ref refid="struct_____o_c_data" kindref="compound">__OCData</ref> *</type>
        <definition>typedef struct __OCData* OCMutableDataRef</definition>
        <argsstring></argsstring>
        <name>OCMutableDataRef</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>:type <ref refid="group___o_c_data_1gaa4e0a88e16159a6586cf3cc2715bf7a4" kindref="member">OCMutableDataRef</ref>: A reference to a mutable data object. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/OCData.h" line="28" column="24" bodyfile="src/OCData.h" bodystart="28" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="group___o_c_data_1ga95e064aa51f1169c329760843a661d21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___o_c_type_1gae4fcca725e41e7af4659ba4902223981" kindref="member">OCTypeID</ref></type>
        <definition>OCTypeID OCDataGetTypeID</definition>
        <argsstring>(void)</argsstring>
        <name>OCDataGetTypeID</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>:func: OCDataGetTypeID :brief: Returns the unique type identifier for OCData objects. :return: The <ref refid="group___o_c_type_1gae4fcca725e41e7af4659ba4902223981" kindref="member">OCTypeID</ref> associated with the OCData type. :see: OCType </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/OCData.h" line="36" column="10" bodyfile="src/OCData.c" bodystart="43" bodyend="47" declfile="src/OCData.h" declline="36" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group___o_c_data_1ga064a00845d8d76e1757f2ae28287e406" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___o_c_data_1ga2791cc4c74800d85862dcfb7c002c57c" kindref="member">OCDataRef</ref></type>
        <definition>OCDataRef OCDataCreate</definition>
        <argsstring>(const uint8_t *bytes, uint64_t length)</argsstring>
        <name>OCDataCreate</name>
        <param>
          <type>const uint8_t *</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>:func: OCDataCreate :brief: Creates an immutable data object by copying the provided bytes. :param bytes: A pointer to the raw byte buffer to copy. If NULL and length is non-zero, the behavior is undefined. If NULL and length is zero, an empty OCData object is created. :param length: The number of bytes to copy from the <computeroutput>bytes</computeroutput> buffer. :return: A new <ref refid="group___o_c_data_1ga2791cc4c74800d85862dcfb7c002c57c" kindref="member">OCDataRef</ref> containing a copy of the specified bytes, or NULL if memory allocation fails. The returned object should be released by the caller using <ref refid="group___o_c_type_1ga2b6e5ce9f5cbfbb459569f2188c445b8" kindref="member">OCRelease()</ref>. :see: OCDataCreateWithBytesNoCopy :see: OCDataCreateCopy </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/OCData.h" line="51" column="11" bodyfile="src/OCData.c" bodystart="62" bodyend="73" declfile="src/OCData.h" declline="51" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group___o_c_data_1ga470a88e8d2c94ee1eee9c5be2b2c10e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___o_c_data_1ga2791cc4c74800d85862dcfb7c002c57c" kindref="member">OCDataRef</ref></type>
        <definition>OCDataRef OCDataCreateWithBytesNoCopy</definition>
        <argsstring>(const uint8_t *bytes, uint64_t length)</argsstring>
        <name>OCDataCreateWithBytesNoCopy</name>
        <param>
          <type>const uint8_t *</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>:func: OCDataCreateWithBytesNoCopy :brief: Creates an immutable data object that references existing bytes without copying them. :details: The new OCData object will directly use the provided <computeroutput>bytes</computeroutput> pointer. The caller is responsible for ensuring that the <computeroutput>bytes</computeroutput> buffer remains valid for the lifetime of this OCData object. Modifying the content of <computeroutput>bytes</computeroutput> after creating the OCData object will affect the OCData object&apos;s content. :param bytes: A pointer to the raw byte buffer. The data is not copied. If NULL and length is non-zero, the behavior is undefined. If NULL and length is zero, an empty OCData object is created (though it won&apos;t reference any specific memory). :param length: The number of bytes in the <computeroutput>bytes</computeroutput> buffer. :return: A new <ref refid="group___o_c_data_1ga2791cc4c74800d85862dcfb7c002c57c" kindref="member">OCDataRef</ref> that directly references the provided bytes, or NULL if memory allocation for the OCData structure itself fails. The returned object should be released by the caller using <ref refid="group___o_c_type_1ga2b6e5ce9f5cbfbb459569f2188c445b8" kindref="member">OCRelease()</ref>. :warning: The <computeroutput>bytes</computeroutput> buffer must not be deallocated or modified while the returned <ref refid="group___o_c_data_1ga2791cc4c74800d85862dcfb7c002c57c" kindref="member">OCDataRef</ref> is in use. :see: OCDataCreate </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/OCData.h" line="71" column="11" bodyfile="src/OCData.c" bodystart="75" bodyend="85" declfile="src/OCData.h" declline="71" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group___o_c_data_1ga2ded5654d329a34c2641b74b2ca36a27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___o_c_data_1ga2791cc4c74800d85862dcfb7c002c57c" kindref="member">OCDataRef</ref></type>
        <definition>OCDataRef OCDataCreateCopy</definition>
        <argsstring>(OCDataRef theData)</argsstring>
        <name>OCDataCreateCopy</name>
        <param>
          <type><ref refid="group___o_c_data_1ga2791cc4c74800d85862dcfb7c002c57c" kindref="member">OCDataRef</ref></type>
          <declname>theData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>:func: OCDataCreateCopy :brief: Creates a new immutable data object by copying an existing data object. :param theData: The <ref refid="group___o_c_data_1ga2791cc4c74800d85862dcfb7c002c57c" kindref="member">OCDataRef</ref> to copy. Must not be NULL. :return: A new <ref refid="group___o_c_data_1ga2791cc4c74800d85862dcfb7c002c57c" kindref="member">OCDataRef</ref> containing a copy of the data from <computeroutput>theData</computeroutput>, or NULL if <computeroutput>theData</computeroutput> is NULL or if memory allocation fails. The returned object should be released by the caller using <ref refid="group___o_c_type_1ga2b6e5ce9f5cbfbb459569f2188c445b8" kindref="member">OCRelease()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/OCData.h" line="81" column="11" bodyfile="src/OCData.c" bodystart="87" bodyend="90" declfile="src/OCData.h" declline="81" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group___o_c_data_1ga9ebd96eca5c242d281851abaaef350ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___o_c_data_1gaa4e0a88e16159a6586cf3cc2715bf7a4" kindref="member">OCMutableDataRef</ref></type>
        <definition>OCMutableDataRef OCDataCreateMutable</definition>
        <argsstring>(uint64_t capacity)</argsstring>
        <name>OCDataCreateMutable</name>
        <param>
          <type>uint64_t</type>
          <declname>capacity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>:func: OCDataCreateMutable :brief: Creates a new mutable data object with a specified initial capacity. :details: The created mutable data object will be empty initially (length 0) but will have pre-allocated memory to hold at least <computeroutput>capacity</computeroutput> bytes. :param capacity: The initial storage capacity in bytes. Can be 0. :return: A new <ref refid="group___o_c_data_1gaa4e0a88e16159a6586cf3cc2715bf7a4" kindref="member">OCMutableDataRef</ref> with the specified initial capacity, or NULL if memory allocation fails. The returned object should be released by the caller using <ref refid="group___o_c_type_1ga2b6e5ce9f5cbfbb459569f2188c445b8" kindref="member">OCRelease()</ref>. :see: OCDataCreateMutableCopy </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/OCData.h" line="94" column="18" bodyfile="src/OCData.c" bodystart="92" bodyend="103" declfile="src/OCData.h" declline="94" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group___o_c_data_1ga911d93411ee2f054aa7278fbee719aa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___o_c_data_1gaa4e0a88e16159a6586cf3cc2715bf7a4" kindref="member">OCMutableDataRef</ref></type>
        <definition>OCMutableDataRef OCDataCreateMutableCopy</definition>
        <argsstring>(uint64_t capacity, OCDataRef theData)</argsstring>
        <name>OCDataCreateMutableCopy</name>
        <param>
          <type>uint64_t</type>
          <declname>capacity</declname>
        </param>
        <param>
          <type><ref refid="group___o_c_data_1ga2791cc4c74800d85862dcfb7c002c57c" kindref="member">OCDataRef</ref></type>
          <declname>theData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>:func: OCDataCreateMutableCopy :brief: Creates a new mutable data object by copying an existing data object, with a specified initial capacity for the new mutable object. :details: The content of <computeroutput>theData</computeroutput> is copied into the new mutable data object. The new object&apos;s capacity will be at least <computeroutput>capacity</computeroutput> bytes, or the length of <computeroutput>theData</computeroutput>, whichever is greater. :param capacity: The minimum initial storage capacity in bytes for the new mutable object. If this is less than the length of <computeroutput>theData</computeroutput>, the capacity will be set to the length of <computeroutput>theData</computeroutput>. :param theData: The <ref refid="group___o_c_data_1ga2791cc4c74800d85862dcfb7c002c57c" kindref="member">OCDataRef</ref> to copy. If NULL, a mutable data object with the specified capacity is created, but it will be empty. :return: A new <ref refid="group___o_c_data_1gaa4e0a88e16159a6586cf3cc2715bf7a4" kindref="member">OCMutableDataRef</ref> initialized with a copy of the data from <computeroutput>theData</computeroutput> and having at least the specified capacity, or NULL if memory allocation fails. The returned object should be released by the caller using <ref refid="group___o_c_type_1ga2b6e5ce9f5cbfbb459569f2188c445b8" kindref="member">OCRelease()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/OCData.h" line="112" column="18" bodyfile="src/OCData.c" bodystart="105" bodyend="108" declfile="src/OCData.h" declline="112" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group___o_c_data_1ga9f4ff101b422969d95125b4907db11c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t OCDataGetLength</definition>
        <argsstring>(OCDataRef theData)</argsstring>
        <name>OCDataGetLength</name>
        <param>
          <type><ref refid="group___o_c_data_1ga2791cc4c74800d85862dcfb7c002c57c" kindref="member">OCDataRef</ref></type>
          <declname>theData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>:func: OCDataGetLength :brief: Returns the number of bytes contained in the data object. :param theData: The <ref refid="group___o_c_data_1ga2791cc4c74800d85862dcfb7c002c57c" kindref="member">OCDataRef</ref> or <ref refid="group___o_c_data_1gaa4e0a88e16159a6586cf3cc2715bf7a4" kindref="member">OCMutableDataRef</ref> to query. Must not be NULL. :return: The length of the data in bytes. Returns 0 if <computeroutput>theData</computeroutput> is NULL or empty. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/OCData.h" line="120" column="10" bodyfile="src/OCData.c" bodystart="110" bodyend="113" declfile="src/OCData.h" declline="120" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group___o_c_data_1ga8034e2f856018d0d6d20046f4c60368d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const uint8_t *</type>
        <definition>const uint8_t * OCDataGetBytePtr</definition>
        <argsstring>(OCDataRef theData)</argsstring>
        <name>OCDataGetBytePtr</name>
        <param>
          <type><ref refid="group___o_c_data_1ga2791cc4c74800d85862dcfb7c002c57c" kindref="member">OCDataRef</ref></type>
          <declname>theData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>:func: OCDataGetBytePtr :brief: Returns a read-only pointer to the internal byte buffer of the data object. :param theData: The <ref refid="group___o_c_data_1ga2791cc4c74800d85862dcfb7c002c57c" kindref="member">OCDataRef</ref> or <ref refid="group___o_c_data_1gaa4e0a88e16159a6586cf3cc2715bf7a4" kindref="member">OCMutableDataRef</ref> to query. Must not be NULL. :return: A const pointer to the data&apos;s bytes. The pointer is valid as long as <computeroutput>theData</computeroutput> is not deallocated (and, for <ref refid="group___o_c_data_1gaa4e0a88e16159a6586cf3cc2715bf7a4" kindref="member">OCMutableDataRef</ref>, not modified in a way that would reallocate its internal buffer). Returns NULL if <computeroutput>theData</computeroutput> is NULL or if the data object is empty and has no buffer. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/OCData.h" line="131" column="15" bodyfile="src/OCData.c" bodystart="115" bodyend="118" declfile="src/OCData.h" declline="131" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group___o_c_data_1ga0687b801fad6261b60317cadde11a508" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t *</type>
        <definition>uint8_t * OCDataGetMutableBytePtr</definition>
        <argsstring>(OCMutableDataRef theData)</argsstring>
        <name>OCDataGetMutableBytePtr</name>
        <param>
          <type><ref refid="group___o_c_data_1gaa4e0a88e16159a6586cf3cc2715bf7a4" kindref="member">OCMutableDataRef</ref></type>
          <declname>theData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>:func: OCDataGetMutableBytePtr :brief: Returns a mutable pointer to the internal byte buffer of a mutable data object. :param theData: The <ref refid="group___o_c_data_1gaa4e0a88e16159a6586cf3cc2715bf7a4" kindref="member">OCMutableDataRef</ref> to query. Must not be NULL. :return: A pointer to the data&apos;s bytes, allowing modification. The pointer is valid as long as <computeroutput>theData</computeroutput> is not deallocated and not modified in a way that would reallocate its internal buffer (e.g., by significantly increasing its length). Returns NULL if <computeroutput>theData</computeroutput> is NULL or if the data object is empty and has no buffer. :warning: Modifying the data through this pointer must be done carefully, especially ensuring not to write past the allocated capacity. Operations like OCDataSetLength or OCDataAppendBytes are generally safer for modifying the length or content. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/OCData.h" line="147" column="9" bodyfile="src/OCData.c" bodystart="120" bodyend="123" declfile="src/OCData.h" declline="147" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group___o_c_data_1gaf8e480dbc9f33a85c14e577b10562b09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OCDataGetBytes</definition>
        <argsstring>(OCDataRef theData, OCRange range, uint8_t *buffer)</argsstring>
        <name>OCDataGetBytes</name>
        <param>
          <type><ref refid="group___o_c_data_1ga2791cc4c74800d85862dcfb7c002c57c" kindref="member">OCDataRef</ref></type>
          <declname>theData</declname>
        </param>
        <param>
          <type><ref refid="struct_o_c_range" kindref="compound">OCRange</ref></type>
          <declname>range</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>:func: OCDataGetBytes :brief: Copies a range of bytes from the data object into a provided buffer. :param theData: The <ref refid="group___o_c_data_1ga2791cc4c74800d85862dcfb7c002c57c" kindref="member">OCDataRef</ref> or <ref refid="group___o_c_data_1gaa4e0a88e16159a6586cf3cc2715bf7a4" kindref="member">OCMutableDataRef</ref> to read from. Must not be NULL. :param range: An <ref refid="struct_o_c_range" kindref="compound">OCRange</ref> structure specifying the starting byte index and the number of bytes to copy. The range must be within the bounds of <computeroutput>theData</computeroutput>. If <computeroutput>range.location + range.length</computeroutput> exceeds the length of <computeroutput>theData</computeroutput>, only bytes up to the end of <computeroutput>theData</computeroutput> are copied. If <computeroutput>range.location</computeroutput> is beyond the end of <computeroutput>theData</computeroutput>, no bytes are copied. :param buffer: A pointer to a memory buffer where the copied bytes will be stored. This buffer must be large enough to hold <computeroutput>range.length</computeroutput> bytes. Must not be NULL if <computeroutput>range.length</computeroutput> is greater than 0. :note: If <computeroutput>theData</computeroutput> is NULL, or <computeroutput>buffer</computeroutput> is NULL (and length &gt; 0), or the range is invalid, the behavior might be undefined or result in no operation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/OCData.h" line="164" column="6" bodyfile="src/OCData.c" bodystart="125" bodyend="128" declfile="src/OCData.h" declline="164" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___o_c_data_1ga0aeec266f7cac0e95afa2ace75285923" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OCDataSetLength</definition>
        <argsstring>(OCMutableDataRef theData, uint64_t length)</argsstring>
        <name>OCDataSetLength</name>
        <param>
          <type><ref refid="group___o_c_data_1gaa4e0a88e16159a6586cf3cc2715bf7a4" kindref="member">OCMutableDataRef</ref></type>
          <declname>theData</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>:func: OCDataSetLength :brief: Sets the length of a mutable data object. :details: If the new <computeroutput>length</computeroutput> is greater than the current length, the data object&apos;s content up to the current length is preserved, and the new bytes at the end are uninitialized (their content is undefined). The capacity may be increased. If the new <computeroutput>length</computeroutput> is less than the current length, the data is truncated. The capacity is not necessarily reduced. :param theData: The <ref refid="group___o_c_data_1gaa4e0a88e16159a6586cf3cc2715bf7a4" kindref="member">OCMutableDataRef</ref> to modify. Must not be NULL. :param length: The new length in bytes. :note: If <computeroutput>theData</computeroutput> is NULL, this function has no effect. If memory reallocation is needed and fails, the object&apos;s length might not be changed, or the program might terminate. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/OCData.h" line="180" column="6" bodyfile="src/OCData.c" bodystart="130" bodyend="154" declfile="src/OCData.h" declline="180" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___o_c_data_1ga2cd63346b6b288dc85faed2f19dab51b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OCDataIncreaseLength</definition>
        <argsstring>(OCMutableDataRef theData, uint64_t extraLength)</argsstring>
        <name>OCDataIncreaseLength</name>
        <param>
          <type><ref refid="group___o_c_data_1gaa4e0a88e16159a6586cf3cc2715bf7a4" kindref="member">OCMutableDataRef</ref></type>
          <declname>theData</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>extraLength</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>:func: OCDataIncreaseLength :brief: Increases the length of a mutable data object by a specified number of bytes. :details: This is a convenience function. The new bytes added at the end of the data object are uninitialized. The capacity of the data object may be increased to accommodate the new length. :param theData: The <ref refid="group___o_c_data_1gaa4e0a88e16159a6586cf3cc2715bf7a4" kindref="member">OCMutableDataRef</ref> to modify. Must not be NULL. :param extraLength: The number of bytes by which to increase the length. :note: If <computeroutput>theData</computeroutput> is NULL, this function has no effect. If <computeroutput>extraLength</computeroutput> is 0, the function has no effect. If memory reallocation is needed and fails, the object&apos;s length might not be changed, or the program might terminate. :see: OCDataSetLength </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/OCData.h" line="196" column="6" bodyfile="src/OCData.c" bodystart="156" bodyend="159" declfile="src/OCData.h" declline="196" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___o_c_data_1gaa06a258e921af271d391b3fca34c0b60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OCDataAppendBytes</definition>
        <argsstring>(OCMutableDataRef theData, const uint8_t *bytes, uint64_t length)</argsstring>
        <name>OCDataAppendBytes</name>
        <param>
          <type><ref refid="group___o_c_data_1gaa4e0a88e16159a6586cf3cc2715bf7a4" kindref="member">OCMutableDataRef</ref></type>
          <declname>theData</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>:func: OCDataAppendBytes :brief: Appends a sequence of bytes to the end of a mutable data object. :details: The length of <computeroutput>theData</computeroutput> is increased by <computeroutput>length</computeroutput>, and its capacity may be increased if necessary. The content of the <computeroutput>bytes</computeroutput> buffer is copied to the end of <computeroutput>theData</computeroutput>. :param theData: The <ref refid="group___o_c_data_1gaa4e0a88e16159a6586cf3cc2715bf7a4" kindref="member">OCMutableDataRef</ref> to modify. Must not be NULL. :param bytes: A pointer to the byte buffer to append. Must not be NULL if <computeroutput>length</computeroutput> &gt; 0. :param length: The number of bytes to append from the <computeroutput>bytes</computeroutput> buffer. :note: If <computeroutput>theData</computeroutput> is NULL, this function has no effect. If <computeroutput>bytes</computeroutput> is NULL and <computeroutput>length</computeroutput> &gt; 0, behavior is undefined. If <computeroutput>length</computeroutput> is 0, the function has no effect. If memory reallocation is needed and fails, the object&apos;s content might not be changed, or the program might terminate. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/OCData.h" line="213" column="6" bodyfile="src/OCData.c" bodystart="161" bodyend="169" declfile="src/OCData.h" declline="213" declcolumn="6"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
