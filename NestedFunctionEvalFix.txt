Fix for Nested Function Evaluation (conj(sqrt(...)))
===============================================================

## Issue
The test for `conj(sqrt(9+16*I))` fails because the evaluator uses the real `sqrt(double)` on a complex input, rather than the complex `csqrt(double complex)`. Nested calls must dispatch to the correct complex functions.

## Required Changes in OCMath.c

1. **Include the C99 complex header** at the top:
   ```c
   #include <complex.h>  // for csqrt, cexp, clog, csin, ccos, casin, cacos, etc.
   ```

2. **Modify the function‐dispatch logic** in `builtInMathFunction` (or the case for `BM_sqrt` in `ComplexNodeEvaluate`) to call `csqrt` on the full complex argument rather than `sqrt` on its real part:

   ```diff
   --- a/src/OCMath.c
   +++ b/src/OCMath.c
   @@ -158,9 +158,12 @@ double complex builtInMathFunction(ComplexNumberFunctionRef func) {
       double complex arg = ComplexNodeEvaluate(func->left);

   -   case BM_sqrt:
   -       /* old: real-only sqrt */
   -       return sqrt(creal(arg)) + 0.0*I;
   +   case BM_sqrt:
   +       /* new: complex-aware sqrt */
   +       return csqrt(arg);
   +
   +   /* Likewise, ensure single-arg complex roots: */
   +   case BM_cbrt:
   +       return cpow(arg, 1.0/3.0);
   +   case BM_qtrt:
   +       return cpow(arg, 1.0/4.0);

       case BM_conj:
           return conj(arg);
   ```

3. **Update other math functions** similarly if they currently use the real-only variants:
   ```c
   case BM_exp:    return cexp(arg);
   case BM_log:    return clog(arg);
   case BM_sin:    return csin(arg);
   case BM_cos:    return ccos(arg);
   case BM_asin:   return casin(arg);
   case BM_acos:   return cacos(arg);
   // etc.
   ```

4. **Rebuild and retest**:
   ```bash
   make clean && make test
   ```
   The `conj(sqrt(9+16*I))` test and all nested-function tests should now pass.

## Rationale
- `csqrt` correctly computes square roots of complex numbers (including those with non-zero imaginary part).
- Using `cpow` for roots generalizes cbrt and qtrt for complex inputs.
- No changes to the grammar (`.y` file) are necessary, since nested single-arg functions are already parsed correctly.
