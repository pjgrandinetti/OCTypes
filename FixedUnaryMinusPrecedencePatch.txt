Fix Unary Minus Precedence with Valid Bison Directives

Replace the precedence section in `OCComplexParser.y` with the following:

```diff
--- a/src/OCComplexParser.y
+++ b/src/OCComplexParser.y
@@ /* operator precedences and associativity */
-  %left  '+' '-'
-  %left  '*' '/' '^'
-  %precedence UMINUS
-  %nonassoc '|'
+  /* lowest: addition/subtraction */
+  %left    '+' '-'
+
+  /* next: multiplication/division */
+  %left    '*' '/'
+
+  /* unary minus binds weaker than ^ */
+  %right   UMINUS
+
+  /* exponentiation: highest, right-associative */
+  %right   '^'
+
+  /* absolute-value bars non-associative */
+  %nonassoc '|'
```

Ensure the grammar rule uses `%prec UMINUS`:

```bison
expr:
    '-' expr %prec UMINUS    { $$ = ComplexNodeNegate($2); }
  | expr '^' expr            { $$ = ComplexNodePower($1, $3); }
  | /* other rules... */
  ;
```

**Explanation:**
- `%right UMINUS` (a valid directive) assigns unary minus a precedence level below `^`.
- `%right '^'` (declared after UMINUS) ensures exponentiation has higher precedence and is right-associative.
- The `%prec UMINUS` override on the unary rule uses the UMINUS precedence.

**After patch:**
- `-2^2` -> `-(2^2)` = **-4**
- `(-2)^2` = **4**
- `2^3^2` -> `2^(3^2)` = **512**

Rebuild and test:

```
make clean && make test
```